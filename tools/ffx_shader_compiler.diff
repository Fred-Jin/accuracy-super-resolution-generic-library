diff --git a/ThirdParty/Arm_ASR/tools/ffx_shader_compiler/src/compiler.h b/ThirdParty/Arm_ASR/tools/ffx_shader_compiler/src/compiler.h
index f77f8de6c..ee55462ee 100644
--- a/ThirdParty/Arm_ASR/tools/ffx_shader_compiler/src/compiler.h
+++ b/ThirdParty/Arm_ASR/tools/ffx_shader_compiler/src/compiler.h
@@ -87,18 +87,19 @@ struct IReflectionData
@@ -87,18 +87,19 @@ struct IReflectionData
diff --git a/ThirdParty/Arm_ASR/tools/ffx_shader_compiler/src/compiler.h b/ThirdParty/Arm_ASR/tools/ffx_shader_compiler/src/compiler.h
diff --git a/ThirdParty/Arm_ASR/tools/ffx_shader_compiler/src/compiler.h b/ThirdParty/Arm_ASR/tools/ffx_shader_compiler/src/compiler.h
index f77f8de6c..ee55462ee 100644
--- a/ThirdParty/Arm_ASR/tools/ffx_shader_compiler/src/compiler.h
+++ b/ThirdParty/Arm_ASR/tools/ffx_shader_compiler/src/compiler.h
@@ -87,18 +87,19 @@ struct IReflectionData
diff --git a/ThirdParty/Arm_ASR/tools/ffx_shader_compiler/src/compiler.h b/ThirdParty/Arm_ASR/tools/ffx_shader_compiler/src/compiler.h
index f77f8de6c..ee55462ee 100644
--- a/ThirdParty/Arm_ASR/tools/ffx_shader_compiler/src/compiler.h
+++ b/ThirdParty/Arm_ASR/tools/ffx_shader_compiler/src/compiler.h
@@ -87,18 +87,19 @@ struct IReflectionData
 /// @ingroup ShaderCompiler
 struct Permutation
 {
-    uint32_t                            key = 0;                    ///< Shader permutation key identifier.
-       bool                                                            usesBalanced = false;           ///< Shader uses Balanced preset
-       bool                                                            usesPerformance = false;        ///< Shader uses performance preset
-    std::string                         hashDigest;                 ///< Shader permutation hash key.
-    std::string                         name;                       ///< Shader permutation name.
-    std::string                         headerFileName;             ///< Shader permutation header file name.
-    std::vector<std::wstring>           defines;                    ///< Shader permutation defines.
-    std::shared_ptr<IShaderBinary>      shaderBinary = nullptr;     ///< Shader permutation compiled binary data.
-    std::shared_ptr<IReflectionData>    reflectionData = nullptr;   ///< Shader permutation <c><i>IReflectionData</i></c> data.
+    uint32_t                            key = 0;                                               ///< Shader permutation key identifier.
+       bool                                                            usesBalanced = false;                   ///< Shader uses Balanced preset
+       bool                                                            usesPerformance = false;                ///< Shader uses performance preset
+       bool                                                            usesUltraPerformance = false;   ///< Shader uses ultra performance preset
+    std::string                         hashDigest;                                            ///< Shader permutation hash key.
+    std::string                         name;                                                  ///< Shader permutation name.
+    std::string                         headerFileName;                                        ///< Shader permutation header file name.
+    std::vector<std::wstring>           defines;                                               ///< Shader permutation defines.
+    std::shared_ptr<IShaderBinary>      shaderBinary = nullptr;                        ///< Shader permutation compiled binary data.
+    std::shared_ptr<IReflectionData>    reflectionData = nullptr;              ///< Shader permutation <c><i>IReflectionData</i></c> data.

-    fs::path                            sourcePath;                 ///< Shader source file path for this permutation.
-    std::unordered_set<std::string>     dependencies;               ///< List of shader dependencies for this permutation.
+    fs::path                            sourcePath;                                            ///< Shader source file path for this permutation.
+    std::unordered_set<std::string>     dependencies;                                  ///< List of shader dependencies for this permutation.
 };

 /// A structure defining the compiler interface. Should be sub-classed for each
diff --git a/ThirdParty/Arm_ASR/tools/ffx_shader_compiler/src/ffx_sc.cpp b/ThirdParty/Arm_ASR/tools/ffx_shader_compiler/src/ffx_sc.cpp
index 918d233a6..87eaad016 100644
--- a/ThirdParty/Arm_ASR/tools/ffx_shader_compiler/src/ffx_sc.cpp
+++ b/ThirdParty/Arm_ASR/tools/ffx_shader_compiler/src/ffx_sc.cpp
@@ -480,6 +480,11 @@ static void fillPermutationShaderQualityMetadata(Permutation& permutation)
                {
                        permutation.usesPerformance = true;
                }
+
+               if(arg.find("FFXM_FSR2_OPTION_SHADER_OPT_ULTRA_PERFORMANCE=1") != std::string::npos)
+               {
+                       permutation.usesUltraPerformance = true;
+               }
        }
 };

diff --git a/ThirdParty/Arm_ASR/tools/ffx_shader_compiler/src/hlsl_compiler.cpp b/ThirdParty/Arm_ASR/tools/ffx_shader_compiler/src/hlsl_compiler.cpp
index f1188d319..861e74b2c 100644
--- a/ThirdParty/Arm_ASR/tools/ffx_shader_compiler/src/hlsl_compiler.cpp
+++ b/ThirdParty/Arm_ASR/tools/ffx_shader_compiler/src/hlsl_compiler.cpp
@@ -798,7 +798,14 @@ bool HLSLCompiler::ExtractDXCReflectionData(Permutation& permutation)
             {
                 if (strcmp(outputs[i]->name, "out.var.SV_TARGET0") == 0)
                 {
-                    rtName = "rw_dilatedDepth";
+                                       if (permutation.usesUltraPerformance)
+                                       {
+                                               rtName = "rw_dilated_depth_motion_vectors_input_luma";
+                                       }
                 }
                 else if (strcmp(outputs[i]->name, "out.var.SV_TARGET1") == 0)
                 {
diff --git a/ThirdParty/Arm_ASR/tools/generate_prebuilt_shaders.py b/ThirdParty/Arm_ASR/tools/generate_prebuilt_shaders.py
index c70c36a6d..a93b94c6a 100644
--- a/ThirdParty/Arm_ASR/tools/generate_prebuilt_shaders.py
+++ b/ThirdParty/Arm_ASR/tools/generate_prebuilt_shaders.py
@@ -36,6 +36,7 @@ def main():
        fsr2_permutation_args += " -DFFXM_FSR2_OPTION_APPLY_SHARPENING={0,1}"
        fsr2_permutation_args += " -DFFXM_FSR2_OPTION_SHADER_OPT_BALANCED={0,1}"
        fsr2_permutation_args += " -DFFXM_FSR2_OPTION_SHADER_OPT_PERFORMANCE={0,1}"
+       fsr2_permutation_args += " -DFFXM_FSR2_OPTION_SHADER_OPT_ULTRA_PERFORMANCE={0,1}"

        fsr2_include_args = "-I "+script_folder+"/../include/gpu/"+" -I "+script_folder+"/../include/gpu/fsr2"
diff --git a/./a/ffx_shader_compiler/src/compiler.h b/./b/ffx_shader_compiler/src/compiler.h
index d79e63e..f77f8de 100755
--- a/./a/ffx_shader_compiler/src/compiler.h
+++ b/./b/ffx_shader_compiler/src/compiler.h
@@ -78,6 +78,7 @@ struct IReflectionData
     std::vector<ShaderResourceInfo> uavBuffers;                 ///< UAV-based buffer resource reflection data representation.
     std::vector<ShaderResourceInfo> samplers;                   ///< Sampler resource reflection data representation (currently unused).
     std::vector<ShaderResourceInfo> rtAccelerationStructures;   ///< Acceleration structure resource reflection data representation.
+    std::vector<ShaderResourceInfo> rtTextures;                 ///< Render target resource reflection data representation.
 };
 
 /// A structure defining a shader permutation representation. Each permutation compiled
@@ -87,6 +88,8 @@ struct IReflectionData
 struct Permutation
 {
     uint32_t                            key = 0;                    ///< Shader permutation key identifier.
+	bool								usesBalanced = false;		///< Shader uses Balanced preset
+	bool								usesPerformance = false;	///< Shader uses performance preset
     std::string                         hashDigest;                 ///< Shader permutation hash key.
     std::string                         name;                       ///< Shader permutation name.
     std::string                         headerFileName;             ///< Shader permutation header file name.
diff --git a/./a/ffx_shader_compiler/src/ffx_sc.cpp b/./b/ffx_shader_compiler/src/ffx_sc.cpp
index 75bc06a..918d233 100755
--- a/./a/ffx_shader_compiler/src/ffx_sc.cpp
+++ b/./b/ffx_shader_compiler/src/ffx_sc.cpp
@@ -465,6 +465,24 @@ void Application::OpenSourceFile()
     }
 }
 
+static void fillPermutationShaderQualityMetadata(Permutation& permutation)
+{
+	for(int32_t i = 0; i < permutation.defines.size(); i++)
+	{
+		std::string arg = WCharToUTF8(permutation.defines[i]);
+
+		if(arg.find("FFXM_FSR2_OPTION_SHADER_OPT_BALANCED=1") != std::string::npos)
+		{
+			permutation.usesBalanced = true;
+		}
+
+		if(arg.find("FFXM_FSR2_OPTION_SHADER_OPT_PERFORMANCE=1") != std::string::npos)
+		{
+			permutation.usesPerformance = true;
+		}
+	}
+};
+
 void Application::ProcessPermutations()
 {
     bool running = true;
@@ -486,6 +504,8 @@ void Application::ProcessPermutations()
 
         m_ReadMutex.unlock();
 
+		fillPermutationShaderQualityMetadata(permutation);
+
         if (running)
             CompilePermutation(permutation);
         else
diff --git a/./a/ffx_shader_compiler/src/glsl_compiler.cpp b/./b/ffx_shader_compiler/src/glsl_compiler.cpp
index 6b846cb..1549ce3 100755
--- a/./a/ffx_shader_compiler/src/glsl_compiler.cpp
+++ b/./b/ffx_shader_compiler/src/glsl_compiler.cpp
@@ -281,6 +281,42 @@ bool GLSLCompiler::ExtractReflectionData(Permutation& permutation)
         }
     }
 
+    count = 0;
+    result = spvReflectEnumerateInterfaceVariables(&reflectShaderModule, &count, NULL);
+    assert(result == SPV_REFLECT_RESULT_SUCCESS);
+
+    std::vector<SpvReflectInterfaceVariable*> outputs(count);
+    result = spvReflectEnumerateInterfaceVariables(&reflectShaderModule, &count, outputs.data());
+    assert(result == SPV_REFLECT_RESULT_SUCCESS);
+
+	const bool usesBalancedOrPerformance = permutation.usesBalanced || permutation.usesPerformance;
+
+    unsigned int nextBindingLocation = 0;
+
+    for (int i = 0; i < outputs.size();)
+    {
+        // Found rt with nextBindingLocation
+        if (outputs[i]->storage_class == SpvStorageClassOutput && outputs[i]->location == nextBindingLocation)
+        {
+            std::string rtName = outputs[i]->name;
+
+            ShaderResourceInfo resourceInfo = { rtName, outputs[i]->location, 0, 0 };
+            glslReflectionData->rtTextures.push_back(resourceInfo);
+
+            nextBindingLocation++;
+            // Start from beginning
+            i = 0;
+        }
+        // let's break out if we can't find nextBindingLocation until the last element
+        else if (i == (outputs.size() - 1))
+        {
+            break;
+        }
+        else
+        {
+            i++;
+        }
+    }
     spvReflectDestroyShaderModule(&reflectShaderModule);
 
     return true;
@@ -360,6 +396,9 @@ void GLSLCompiler::WriteBinaryHeaderReflectionData(FILE* fp, const Permutation&
 
     // RT Acceleration Structure
     WriteResourceInfo(fp, permutation.name, glslReflectionData->rtAccelerationStructures, "RTAccelerationStructure");
+
+    // Render Target
+    WriteResourceInfo(fp, permutation.name, glslReflectionData->rtTextures, "TextureRT");
 }
 
 void GLSLCompiler::WritePermutationHeaderReflectionStructMembers(FILE* fp)
@@ -406,6 +445,12 @@ void GLSLCompiler::WritePermutationHeaderReflectionStructMembers(FILE* fp)
     fprintf(fp, "    const uint32_t* rtAccelerationStructureBindings;\n");
     fprintf(fp, "    const uint32_t* rtAccelerationStructureCounts;\n");
     fprintf(fp, "    const uint32_t* rtAccelerationStructureSpaces;\n");
+    fprintf(fp, "\n");
+    fprintf(fp, "    const uint32_t  numRTTextures;\n");
+    fprintf(fp, "    const char**    rtTextureNames;\n");
+    fprintf(fp, "    const uint32_t* rtTextureBindings;\n");
+    fprintf(fp, "    const uint32_t* rtTextureCounts;\n");
+    fprintf(fp, "    const uint32_t* rtTextureSpaces;\n");
 }
 
 void GLSLCompiler::WritePermutationHeaderReflectionData(FILE* fp, const Permutation& permutation)
@@ -440,4 +485,5 @@ void GLSLCompiler::WritePermutationHeaderReflectionData(FILE* fp, const Permutat
     WriteResourceInfo(fp, glslReflectionData->uavBuffers.size(), permutation.name, "BufferUAV");
     WriteResourceInfo(fp, glslReflectionData->samplers.size(), permutation.name, "Sampler");
     WriteResourceInfo(fp, glslReflectionData->rtAccelerationStructures.size(), permutation.name, "RTAccelerationStructure");
+    WriteResourceInfo(fp, glslReflectionData->rtTextures.size(), permutation.name, "TextureRT");
 }
diff --git a/./a/ffx_shader_compiler/src/hlsl_compiler.cpp b/./b/ffx_shader_compiler/src/hlsl_compiler.cpp
index 5375d3d..f1188d3 100755
--- a/./a/ffx_shader_compiler/src/hlsl_compiler.cpp
+++ b/./b/ffx_shader_compiler/src/hlsl_compiler.cpp
@@ -23,6 +23,39 @@
 #include "hlsl_compiler.h"
 #include "utils.h"
 
+#include <md5.h>
+#include <spirv_reflect.h>
+
+std::string _MD5HashString(unsigned char* sig)
+{
+    char out[33];
+    out[32] = '\0';
+
+    char* out_ptr = out;
+    std::stringstream ss;
+
+    for (int i = 0; i < MD5_SIZE; i++)
+    {
+        std::snprintf(out_ptr, 32, "%02x", sig[i]);
+        out_ptr += 2;
+    }
+
+    return std::string(out);
+}
+
+std::string _GetMD5HashDigest(void* buffer, size_t size)
+{
+    unsigned char sig[MD5_SIZE];
+
+    md5::md5_t md5;
+
+    md5.process(buffer, size);
+
+    md5.finish(sig);
+
+    return _MD5HashString(sig);
+}
+
 // D3D12SDKVersion needs to line up with the version number on Microsoft's DirectX12 Agility SDK Download page
 extern "C" { __declspec(dllexport) extern const UINT D3D12SDKVersion = 608; }
 extern "C" { __declspec(dllexport) extern const char* D3D12SDKPath = u8".\\D3D12\\"; }
@@ -336,6 +369,7 @@ bool HLSLCompiler::CompileDXC(Permutation& permutation, const std::vector<std::s
         // ------------------------------------------------------------------------------------------------
         // Retrieve shader hash
         // ------------------------------------------------------------------------------------------------
+#if 0
         CComPtr<IDxcBlob> pHash = nullptr;
 
         hlslShaderBinary->pResults->GetOutput(DXC_OUT_SHADER_HASH, IID_PPV_ARGS(&pHash), nullptr);
@@ -351,6 +385,9 @@ bool HLSLCompiler::CompileDXC(Permutation& permutation, const std::vector<std::s
 
             permutation.hashDigest = s.str();
         }
+#else
+        permutation.hashDigest = _GetMD5HashDigest(hlslShaderBinary->BufferPointer(), hlslShaderBinary->BufferSize());
+#endif
 
         // ------------------------------------------------------------------------------------------------
         // Dump PDB if required
@@ -560,6 +597,20 @@ bool HLSLCompiler::Compile(Permutation&                    permutation,
     }
 }
 
+static std::string getAccumulatePassRTNameFromIdx(const Permutation& permutation, const uint32_t rtIdx)
+{
+	// See ffxm_core_gpu_common.h for more details about how the presets affect optimizations applied to this pass.
+	std::string name = "";
+	const bool usesBalancedOrPerformance = permutation.usesBalanced || permutation.usesPerformance;
+	static const char* s_rtNamesForQuality[] = {"rw_internal_upscaled_color", "rw_lock_status", "rw_luma_history", "rw_upscaled_output"};
+	static const char* s_rtNamesForBalancedAndPerformance[] = {"rw_internal_upscaled_color", "rw_internal_temporal_reactive", "rw_lock_status", "rw_upscaled_output"};
+	if(!usesBalancedOrPerformance)
+	{
+		return s_rtNamesForQuality[rtIdx];
+	}
+	return s_rtNamesForBalancedAndPerformance[rtIdx];
+}
+
 bool HLSLCompiler::ExtractDXCReflectionData(Permutation& permutation)
 {
     IShaderBinary* hlslShaderBinary = permutation.shaderBinary.get();
@@ -567,6 +618,7 @@ bool HLSLCompiler::ExtractDXCReflectionData(Permutation& permutation)
 
     IReflectionData* hlslReflectionData = reinterpret_cast<IReflectionData*>(permutation.reflectionData.get());
 
+#if 0
     CComPtr<IDxcBlob> pReflectionData;
     reinterpret_cast<HLSLDxcShaderBinary*>(hlslShaderBinary)->pResults->GetOutput(DXC_OUT_REFLECTION, IID_PPV_ARGS(&pReflectionData), nullptr);
 
@@ -633,6 +685,157 @@ bool HLSLCompiler::ExtractDXCReflectionData(Permutation& permutation)
     }
     else
         return false;
+#else
+    SpvReflectShaderModule reflectShaderModule;
+
+    SpvReflectResult result = spvReflectCreateShaderModule(hlslShaderBinary->BufferSize(), hlslShaderBinary->BufferPointer(), &reflectShaderModule);
+    assert(result == SPV_REFLECT_RESULT_SUCCESS);
+
+    uint32_t count = 0;
+    result = spvReflectEnumerateDescriptorSets(&reflectShaderModule, &count, NULL);
+    assert(result == SPV_REFLECT_RESULT_SUCCESS);
+
+    std::vector<SpvReflectDescriptorSet*> sets(count);
+    result = spvReflectEnumerateDescriptorSets(&reflectShaderModule, &count, sets.data());
+    assert(result == SPV_REFLECT_RESULT_SUCCESS);
+
+    for (int setIdx = 0; setIdx < sets.size(); setIdx++)
+    {
+        SpvReflectDescriptorSet* ds = sets[setIdx];
+
+        for (int bindingIdx = 0; bindingIdx < ds->binding_count; bindingIdx++)
+        {
+            SpvReflectDescriptorBinding* binding = ds->bindings[bindingIdx];
+            ShaderResourceInfo resourceInfo = {binding->name ? binding->name : "", binding->binding, binding->count, ds->set};
+
+            switch (binding->descriptor_type)
+            {
+            case SPV_REFLECT_DESCRIPTOR_TYPE_UNIFORM_BUFFER:
+                hlslReflectionData->constantBuffers.push_back(resourceInfo);
+                break;
+            case SPV_REFLECT_DESCRIPTOR_TYPE_SAMPLED_IMAGE:
+                hlslReflectionData->srvTextures.push_back(resourceInfo);
+                break;
+            case SPV_REFLECT_DESCRIPTOR_TYPE_SAMPLER:
+                hlslReflectionData->samplers.push_back(resourceInfo);
+                break;
+            case SPV_REFLECT_DESCRIPTOR_TYPE_STORAGE_IMAGE:
+                hlslReflectionData->uavTextures.push_back(resourceInfo);
+                break;
+            case SPV_REFLECT_DESCRIPTOR_TYPE_STORAGE_BUFFER:
+                if (binding->resource_type == SPV_REFLECT_RESOURCE_FLAG_SRV)
+                    hlslReflectionData->srvBuffers.push_back(resourceInfo);
+                else
+                    hlslReflectionData->uavBuffers.push_back(resourceInfo);
+                break;
+            case SPV_REFLECT_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_KHR:
+                hlslReflectionData->rtAccelerationStructures.push_back(resourceInfo);
+                break;
+
+            case SPV_REFLECT_DESCRIPTOR_TYPE_INPUT_ATTACHMENT:
+            case SPV_REFLECT_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER:
+            case SPV_REFLECT_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER:
+            case SPV_REFLECT_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER:
+            case SPV_REFLECT_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC:
+            case SPV_REFLECT_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC:
+            default:
+                throw std::runtime_error("Shader uses an unsupported resource type!");
+                break;
+            }
+        }
+    }
+
+    count = 0;
+    result = spvReflectEnumerateInterfaceVariables(&reflectShaderModule, &count, NULL);
+    assert(result == SPV_REFLECT_RESULT_SUCCESS);
+
+    std::vector<SpvReflectInterfaceVariable*> outputs(count);
+    result = spvReflectEnumerateInterfaceVariables(&reflectShaderModule, &count, outputs.data());
+    assert(result == SPV_REFLECT_RESULT_SUCCESS);
+
+	const bool usesBalancedOrPerformance = permutation.usesBalanced || permutation.usesPerformance;
+
+    for (int i = 0; i < outputs.size(); i++)
+    {
+        if (outputs[i]->storage_class == SpvStorageClassOutput)
+        {
+            std::string rtName = "";
+            if (m_ShaderName.find("accumulate") != std::string::npos)
+            {
+                if (strcmp(outputs[i]->name, "out.var.SV_TARGET0") == 0)
+                {
+					rtName = getAccumulatePassRTNameFromIdx(permutation, 0);
+                }
+                else if (strcmp(outputs[i]->name, "out.var.SV_TARGET1") == 0)
+                {
+					rtName = getAccumulatePassRTNameFromIdx(permutation, 1);
+                }
+                else if (strcmp(outputs[i]->name, "out.var.SV_TARGET2") == 0)
+                {
+					rtName = getAccumulatePassRTNameFromIdx(permutation, 2);
+                }
+                else if (strcmp(outputs[i]->name, "out.var.SV_TARGET3") == 0)
+                {
+					rtName = getAccumulatePassRTNameFromIdx(permutation, 3);
+                }
+				else if(usesBalancedOrPerformance && strcmp(outputs[i]->name, "out.var.SV_TARGET4") == 0)
+				{
+					rtName = getAccumulatePassRTNameFromIdx(permutation, 4);
+				}
+            }
+            else if (m_ShaderName.find("depth_clip") != std::string::npos)
+            {
+                if (strcmp(outputs[i]->name, "out.var.SV_TARGET0") == 0)
+                {
+                    rtName = "rw_dilated_reactive_masks";
+                }
+                else if (strcmp(outputs[i]->name, "out.var.SV_TARGET1") == 0)
+                {
+                    rtName = "rw_prepared_input_color";
+                }
+            }
+            else if (m_ShaderName.find("reconstruct") != std::string::npos)
+            {
+                if (strcmp(outputs[i]->name, "out.var.SV_TARGET0") == 0)
+                {
+                    rtName = "rw_dilatedDepth";
+                }
+                else if (strcmp(outputs[i]->name, "out.var.SV_TARGET1") == 0)
+                {
+                    rtName = "rw_dilated_motion_vectors";
+                }
+                else if (strcmp(outputs[i]->name, "out.var.SV_TARGET2") == 0)
+                {
+                    rtName = "rw_lock_input_luma";
+                }
+            }
+            else if (m_ShaderName.find("rcas") != std::string::npos)
+            {
+                if (strcmp(outputs[i]->name, "out.var.SV_TARGET0") == 0)
+                {
+                    rtName = "rw_upscaled_output";
+                }
+            }
+            else if (m_ShaderName.find("reactive") != std::string::npos)
+            {
+                if (strcmp(outputs[i]->name, "out.var.SV_TARGET0") == 0)
+                {
+                    rtName = "rw_output_autoreactive";
+                }
+            }
+            else
+            {
+                break;
+            }
+
+            ShaderResourceInfo resourceInfo = { rtName, outputs[i]->location, 0, 0 };
+            hlslReflectionData->rtTextures.push_back(resourceInfo);
+        }
+    }
+    spvReflectDestroyShaderModule(&reflectShaderModule);
+
+    return true;
+#endif
 }
 
 bool HLSLCompiler::ExtractFXCReflectionData(Permutation& permutation)
@@ -810,6 +1013,9 @@ void HLSLCompiler::WriteBinaryHeaderReflectionData(FILE* fp, const Permutation&
 
     // RT Acceleration Structure
     WriteResourceInfo(fp, permutation.name, hlslReflectionData->rtAccelerationStructures, "RTAccelerationStructure");
+
+    // Render Target
+    WriteResourceInfo(fp, permutation.name, hlslReflectionData->rtTextures, "TextureRT");
 }
 
 void HLSLCompiler::WritePermutationHeaderReflectionStructMembers(FILE* fp)
@@ -856,6 +1062,12 @@ void HLSLCompiler::WritePermutationHeaderReflectionStructMembers(FILE* fp)
     fprintf(fp, "    const uint32_t* rtAccelerationStructureBindings;\n");
     fprintf(fp, "    const uint32_t* rtAccelerationStructureCounts;\n");
     fprintf(fp, "    const uint32_t* rtAccelerationStructureSpaces;\n");
+    fprintf(fp, "\n");
+    fprintf(fp, "    const uint32_t  numRTTextures;\n");
+    fprintf(fp, "    const char**    rtTextureNames;\n");
+    fprintf(fp, "    const uint32_t* rtTextureBindings;\n");
+    fprintf(fp, "    const uint32_t* rtTextureCounts;\n");
+    fprintf(fp, "    const uint32_t* rtTextureSpaces;\n");
 }
 
 void HLSLCompiler::WritePermutationHeaderReflectionData(FILE* fp, const Permutation& permutation)
@@ -890,4 +1102,5 @@ void HLSLCompiler::WritePermutationHeaderReflectionData(FILE* fp, const Permutat
     WriteResourceInfo(fp, hlslReflectionData->uavBuffers.size(), permutation.name, "BufferUAV");
     WriteResourceInfo(fp, hlslReflectionData->samplers.size(), permutation.name, "Sampler");
     WriteResourceInfo(fp, hlslReflectionData->rtAccelerationStructures.size(), permutation.name, "RTAccelerationStructure");
+    WriteResourceInfo(fp, hlslReflectionData->rtTextures.size(), permutation.name, "TextureRT");
 }
